version: '3.3'

services:

    nginx:
        image: nginx
        #build: './docker/disabled'
        container_name: nginx-container
        restart: unless-stopped
        volumes:
            - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
            - ./docker/nginx/html:/usr/share/nginx/html
        environment:
        #    NGINX_HOST: yamlops.com
        #    NGINX_PORT: 80
            USER_USER: ${USER_USER}
            USER1_USER: ${USER1_USER}
            USER2_USER: ${USER2_USER}
            USER3_USER: ${USER3_USER}
        depends_on:
            - adminer
            - airflow
            - mlflow
            - jupyter
            - kafdrop
            - rest-prediction
        command: /bin/bash -c "sleep 60s && envsubst '$$NGINX_HOST $$NGINX_PORT $$USER_USER $$USER1_USER $$USER2_USER $$USER3_USER' < /etc/nginx/conf.d/nginx.conf > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
        ports:
            - "${NGINX_PORT}:80"

    postgres:
        build: './docker/postgres'
        #build: './docker/disabled'
        container_name: postgres-container
        restart: unless-stopped

    cassandra:
        image: cassandra
        #build: './docker/disabled'
        container_name: cassandra-container
        restart: unless-stopped
        environment:
            # reduce heap size for local development
            MAX_HEAP_SIZE: '256M'
            HEAP_NEWSIZE: '128M'
        ports:
            - "9042:9042"

    cassandra-client:
        image: cassandra
        container_name: cassandra-client-container
        restart: "no"
        depends_on:
            - cassandra
        volumes:
            - ./docker/cassandra/init.cql:/init.cql
        command: /bin/bash -c "sleep 60 && echo Loading cassandra keyspace && cqlsh cassandra -f /init.cql"

    cassandra-web:
        image: ipushc/cassandra-web
        #build: './docker/disabled'
        container_name: cassandra-web-container
        restart: unless-stopped
        depends_on:
            - cassandra
        environment:
            CASSANDRA_HOST: cassandra
            CASSANDRA_PORT: 9042
            #HOST_PORT: 8083
        ports:
            - "${CASSANDRA_WEB_PORT}:8083"

    ignite:
        #image: apacheignite/ignite:2.7.6
        build: './docker/disabled'
        container_name: ignite-container
        restart: unless-stopped
        environment:
            IGNITE_QUIET: 'false'
        restart: unless-stopped

    adminer:
        image: adminer
        #build: './docker/disabled'
        container_name: adminer-container
        restart: unless-stopped
        depends_on:
            - postgres
        environment:
            ADMINER_PLUGINS: 'frames'
        ports:
            - "${ADMINER_PORT}:8080"

    airflow:
        build: './docker/airflow'
        #build: './docker/disabled'
        container_name: airflow-container
        restart: unless-stopped
        depends_on:
            - postgres
        environment:
            FERNET_KEY: 46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            LOAD_EX: y                       # pre-load airflow dag examples
            AIRFLOW_CONN_POSTGRES_DEFAULT: 'postgres://airflow:airflow@postgres:5432/airflow'
            AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgres://airflow:airflow@postgres:5432/airflow'
            AIRFLOW__WEBSERVER__BASE_URL: 'http://localhost:8080/airflow'
            MLFLOW_TRACKING_URI: 'http://mlflow:8080'
        volumes:
            - ./docker/airflow/dags:/usr/local/airflow/dags
            - ./docker/airflow/plugins:/usr/local/airflow/plugins
            - ./docker/airflow/glue-code:/usr/local/airflow/glue-code
            - ./dfs:/usr/local/airflow/dfs
            - ./dfs/mlflow:/mlflow
            - ./user-workspace:/user-workspace
        ports:
            - "${AIRFLOW_PORT}:8080"
            
    mlflow:
        build: './docker/mlflow'
        #build: './docker/disabled'
        container_name: mlflow-container
        restart: unless-stopped
        depends_on:
            - postgres
        volumes:
            - ./dfs/mlflow/artifacts:/mlflow/artifacts
        command: 'mlflow server --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow --default-artifact-root /mlflow/artifacts --host 0.0.0.0 --port 8080 --static-prefix /mlflow'
        ports:
            - "${MLFLOW_PORT}:8080"

    zookeeper:
        image: wurstmeister/zookeeper
        #build: './docker/disabled'
        container_name: zookeeper-container
        restart: unless-stopped

    kafka:
        image: wurstmeister/kafka
        #build: './docker/disabled'
        container_name: kafka-container
        restart: unless-stopped
        depends_on:
            - zookeeper
        environment:
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_ADVERTISED_HOST_NAME: kafka
            KAFKA_CREATE_TOPICS: 'bracelet-feed:1:1'    # create a topic called 'bracelet-feed"  with 1 partition and 1 replica
            #KAFKA_CREATE_TOPICS: 'Topic1:1:3,Topic2:1:1:compact'
            KAFKA_LISTENERS: 'PLAINTEXT://:9092'
            KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - "${KAFKA_PORT}:9092"

    kafdrop:
        image: obsidiandynamics/kafdrop
        #build: './docker/disabled'
        container_name: kafdrop-container
        restart: unless-stopped
        depends_on:
            - kafka
        environment:
            KAFKA_BROKERCONNECT: 'kafka:9092'
            SERVER_PORT: 8080
            SERVER_SERVLET_CONTEXTPATH: '/kafdrop/'
            JVM_OPTS: '-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify'
        ports:
            - "${KAFDROP_PORT}:8080"

    rest-prediction:
        build: './docker/rest-prediction'
        #build: './docker/disabled'
        container_name: rest-prediction-container
        restart: unless-stopped
        depends_on:
            - kafka
        environment:
            MLFLOW_TRACKING_URI: 'http://mlflow:8080'
        volumes:
            - ./dfs/mlflow:/mlflow
        command: /bin/bash -c "sleep 30s && python ./rest-prediction.py --run-id a5cfbe95422d44bf81a3cf8c871f0451 --kafka-topic bracelet-feed"
        ports:
            - "${REST_PREDICTION_PORT}:5000"

    spark-master:
        image: bde2020/spark-master:2.4.4-hadoop2.7
        container_name: spark-master-container
        restart: unless-stopped
        environment:
            INIT_DAEMON_STEP: setup_spark
        ports:
            - "${SPARK_MASTER_PORT}:8080"

    spark-worker-1:
        image: bde2020/spark-worker:2.4.4-hadoop2.7
        container_name: spark-worker-1-container
        restart: unless-stopped
        depends_on:
            - spark-master
        environment:
            SPARK_MASTER: 'spark://spark-master:7077'
        ports:
            - "${SPARK_WORKER1_PORT}:8080"

    jupyter:
        build: './docker/jupyter'
        #build: './docker/disabled'
        container_name: jupyter-container
        restart: unless-stopped
        user: root
        environment:
            JUPYTER_ENABLE_LAB: 'yes'
            NB_USER: ${USER_USER}
            NB_GROUP: ${USER_GROUP}
            NB_UID: ${USER_UID}
            NB_GID: ${USER_GID}
            CHOWN_HOME: 'yes'
            CHOWN_HOME_OPTS: -R
            GRANT_SUDO: 'yes'
            MLFLOW_TRACKING_URI: 'http://mlflow:8080'
        volumes:
            - ./user-workspace/${USER_USER}:/home/${USER_USER}/work
            - ./dfs:/home/${USER_USER}/dfs
            - ./dfs/mlflow:/mlflow
        command: "start-notebook.sh --NotebookApp.password='${SHA_PWD_SA1920}' --NotebookApp.base_url=/user/${USER_USER}"
        ports:
            - "${JUPYTER_PORT}:8888"

    jupyter1:
        build: './docker/jupyter'
        #build: './docker/disabled'
        container_name: jupyter1-container
        restart: unless-stopped
        user: root
        environment:
            JUPYTER_ENABLE_LAB: 'yes'
            NB_USER: ${USER1_USER}
            NB_GROUP: ${USER_GROUP}
            NB_UID: ${USER_UID}
            NB_GID: ${USER_GID}
            CHOWN_HOME: 'yes'
            CHOWN_HOME_OPTS: -R
            GRANT_SUDO: 'yes'
            MLFLOW_TRACKING_URI: 'http://mlflow:8080'
        volumes:
            - ./user-workspace/${USER1_USER}:/home/${USER1_USER}/work
            - ./dfs:/home/${USER1_USER}/dfs
            - ./dfs/mlflow:/mlflow
        command: "start-notebook.sh --NotebookApp.password='${SHA_PWD_SA1920}' --NotebookApp.base_url=/user/${USER1_USER}"
        ports:
            - "${JUPYTER1_PORT}:8888"

    jupyter2:
        build: './docker/jupyter'
        #build: './docker/disabled'
        container_name: jupyter2-container
        restart: unless-stopped
        user: root
        environment:
            JUPYTER_ENABLE_LAB: 'yes'
            NB_USER: ${USER2_USER}
            NB_GROUP: ${USER_GROUP}
            NB_UID: ${USER_UID}
            NB_GID: ${USER_GID}
            CHOWN_HOME: 'yes'
            CHOWN_HOME_OPTS: -R
            GRANT_SUDO: 'yes'
            MLFLOW_TRACKING_URI: 'http://mlflow:8080'
        volumes:
            - ./user-workspace/${USER2_USER}:/home/${USER2_USER}/work
            - ./dfs:/home/${USER2_USER}/dfs
            - ./dfs/mlflow:/mlflow
        command: "start-notebook.sh --NotebookApp.password='${SHA_PWD_SA1920}' --NotebookApp.base_url=/user/${USER2_USER}"
        ports:
            - "${JUPYTER2_PORT}:8888"

    jupyter3:
        build: './docker/jupyter'
        #build: './docker/disabled'
        container_name: jupyter3-container
        restart: unless-stopped
        user: root
        environment:
            JUPYTER_ENABLE_LAB: 'yes'
            NB_USER: ${USER3_USER}
            NB_GROUP: ${USER_GROUP}
            NB_UID: ${USER_UID}
            NB_GID: ${USER_GID}
            CHOWN_HOME: 'yes'
            CHOWN_HOME_OPTS: -R
            GRANT_SUDO: 'yes'
            MLFLOW_TRACKING_URI: 'http://mlflow:8080'
        volumes:
            - ./user-workspace/${USER3_USER}:/home/${USER3_USER}/work
            - ./dfs:/home/${USER3_USER}/dfs
            - ./dfs/mlflow:/mlflow
        command: "start-notebook.sh --NotebookApp.password='${SHA_PWD_SA1920}' --NotebookApp.base_url=/user/${USER3_USER}"
        ports:
            - "${JUPYTER3_PORT}:8888"
       
