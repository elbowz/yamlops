version: '3.7'

services:

    nginx:
        image: nginx
        #build: './docker/disabled'
        container_name: nginx-container
        restart: always
        volumes:
            - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
            - ./docker/nginx/html:/usr/share/nginx/html
        environment:
        #    - NGINX_HOST=yamlops.com
        #    - NGINX_PORT=80
            - USER1_USER=${USER1_USER}
        depends_on:
            - adminer
            - airflow
            - mlflow
            - jupyter
        command: /bin/bash -c "envsubst '$$NGINX_HOST $$NGINX_PORT $$USER1_USER' < /etc/nginx/conf.d/nginx.conf > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
        ports:
            - "${NGINX_PORT}:80"

    postgres:
        build: './docker/postgres'
        #build: './docker/disabled'
        container_name: postgres-container
        restart: always

    cassandra:
        #image: cassandra:3.11.5
        build: './docker/disabled'
        container_name: cassandra-container
        restart: always

    ignite:
        #image: apacheignite/ignite:2.7.6
        build: './docker/disabled'
        container_name: ignite-container
        environment:
            - IGNITE_QUIET=false
        restart: always

    cassandra-web:
        #image: ipushc/cassandra-web
        build: './docker/disabled'
        container_name: cassandra-web-container
        restart: always
        depends_on:
            - cassandra
        environment:
            CASSANDRA_HOST: cassandra
            #CASSANDRA_USERNAME: cassandra
            #CASSANDRA_PASSWORD: cassandra
            CASSANDRA_PORT: 9042
            HOST_PORT: 8080
        ports:
            - "${CASSANDRA_WEB_PORT}:8080"
            
    adminer:
        image: adminer
        #build: './docker/disabled'
        container_name: adminer-container
        restart: always
        depends_on:
            - postgres
        ports:
            - "${ADMINER_PORT}:8080"

    airflow:
        build: './docker/airflow'
        #build: './docker/disabled'
        container_name: airflow-container
        restart: always
        depends_on:
            - postgres
        environment:
            FERNET_KEY: 46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            LOAD_EX: y                       # pre-load airflow dag examples
            AIRFLOW_CONN_POSTGRES_DEFAULT: 'postgres://airflow:airflow@postgres:5432/airflow'
            AIRFLOW__WEBSERVER__BASE_URL: 'http://localhost:8080/airflow'
            MLFLOW_TRACKING_URI: 'http://mlflow:8080'
        volumes:
            - ./dags:/usr/local/airflow/dags
            - ./testing/data:/usr/local/airflow/data
            - ./testing/models:/usr/local/airflow/models
            - ./docker/airflow/plugins:/usr/local/airflow/plugins
            - ./dfs:/usr/local/airflow/dfs
            - ./dfs/mlflow:/mlflow
            - ./user-workspace/emanuele:/tmp/emanuele
        ports:
            - "${AIRFLOW_PORT}:8080"
#        healthcheck:
#            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
#            interval: 30s
#            timeout: 30s
#            retries: 3
            
    mlflow:
        build: './docker/mlflow'
        #build: './docker/disabled'
        container_name: mlflow-container
        depends_on:
            - postgres
        volumes:
            - ./dfs/mlflow/artifacts:/mlflow/artifacts
        command: 'mlflow server --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow --default-artifact-root /mlflow/artifacts --host 0.0.0.0 --port 8080 --static-prefix /mlflow'
        ports:
            - "${MLFLOW_PORT}:8080"

    zookeeper:
        #image: wurstmeister/zookeeper
        build: './docker/disabled'
        container_name: zookeeper-container

    kafka:
        #image: wurstmeister/kafka
        build: './docker/disabled'
        container_name: kafka-container
        environment:
            KAFKA_ADVERTISED_HOST_NAME: kafka
            KAFKA_CREATE_TOPICS: 'TopicA:1:1'    # create a topic called 'TopicA"  with 1 partition and 1 replica
            #KAFKA_CREATE_TOPICS: 'Topic1:1:3,Topic2:1:1:compact'
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENERS: 'PLAINTEXT://:9092'
            KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - "${KAFKA_PORT}:9092"

    jupyter:
        build: './docker/jupyter'
        #build: './docker/disabled'
        container_name: jupyter-container
        #working_dir: /home/${USER1_USER}
        user: root
        environment:
            JUPYTER_ENABLE_LAB: 'yes'
            NB_USER: ${USER1_USER}
            NB_GROUP: ${USER1_GROUP}
            NB_UID: ${USER1_UID}
            NB_GID: ${USER1_GID}
            CHOWN_HOME: 'yes'
            CHOWN_HOME_OPTS: -R
            GRANT_SUDO: 'yes'
            MLFLOW_TRACKING_URI: 'http://mlflow:8080'
        volumes:
            - ./user-workspace/${USER1_USER}:/home/${USER1_USER}/work
            - ./dfs:/home/${USER1_USER}/dfs
            - ./dfs/mlflow:/mlflow
        command: "start-notebook.sh --NotebookApp.password='${SHA_PWD_SA1920}' --NotebookApp.base_url=/user/${USER1_USER}"
        ports:
            - "${JUPYTER1_PORT}:8888"

    spark-master:
        image: bde2020/spark-master:2.4.4-hadoop2.7
        container_name: spark-master-container
        environment:
            - INIT_DAEMON_STEP=setup_spark
        ports:
          - "${SPARK_MASTER_PORT}:8080"

    spark-worker-1:
        image: bde2020/spark-worker:2.4.4-hadoop2.7
        container_name: spark-worker-1-container
        depends_on:
            - spark-master
        environment:
            - "SPARK_MASTER=spark://spark-master:7077"
        ports:
            - "${SPARK_WORKER1_PORT}:8080"
       
